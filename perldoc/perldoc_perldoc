[1mNAME[0m
    perldoc - Look up Perl documentation in Pod format.

[1mSYNOPSIS[0m
        perldoc [-h] [-D] [-t] [-u] [-m] [-l] [-U] [-F]
            [-i] [-V] [-T] [-r]
            [-d destination_file]
            [-o formatname]
            [-M FormatterClassName]
            [-w formatteroption:value]
            [-n nroff-replacement]
            [-X]
            [-L language_code]
            PageName|ModuleName|ProgramName|URL

    Examples:

        perldoc -f BuiltinFunction

        perldoc -L it -f BuiltinFunction

        perldoc -q FAQ Keyword

        perldoc -L fr -q FAQ Keyword

        perldoc -v PerlVariable

        perldoc -a PerlAPI

    See below for more description of the switches.

[1mDESCRIPTION[0m
    [1mperldoc[0m looks up documentation in .pod format that is embedded in the perl
    installation tree or in a perl script, and displays it using a variety of
    formatters. This is primarily used for the documentation for the perl
    library modules.

    Your system may also have man pages installed for those modules, in which
    case you can probably just use the man(1) command.

    If you are looking for a table of contents to the Perl library modules
    documentation, see the perltoc page.

[1mOPTIONS[0m
    [1m-h[0m   Prints out a brief [1mh[0melp message.

    [1m-D[0m   [1mD[0mescribes search for the item in [1md[0metail.

    [1m-t[0m   Display docs using plain [1mt[0mext converter, instead of nroff. This may
         be faster, but it probably won't look as nice.

    [1m-u[0m   Skip the real Pod formatting, and just show the raw Pod source
         ([1mU[0mnformatted)

    [1m-m[0m [4mmodule[0m
         Display the entire module: both code and unformatted pod
         documentation. This may be useful if the docs don't explain a
         function in the detail you need, and you'd like to inspect the code
         directly; perldoc will find the file for you and simply hand it off
         for display.

    [1m-l[0m   Display on[1ml[0my the file name of the module found.

    [1m-U[0m   When running as the superuser, don't attempt drop privileges for
         security. This option is implied with [1m-F[0m.

         [1mNOTE[0m: Please see the heading SECURITY below for more information.

    [1m-F[0m   Consider arguments as file names; no search in directories will be
         performed. Implies [1m-U[0m if run as the superuser.

    [1m-f[0m [4mperlfunc[0m
         The [1m-f[0m option followed by the name of a perl built-in function will
         extract the documentation of this function from perlfunc.

         Example:

               perldoc -f sprintf

    [1m-q[0m [4mperlfaq-search-regexp[0m
         The [1m-q[0m option takes a regular expression as an argument. It will
         search the [1mq[0muestion headings in perlfaq[1-9] and print the entries
         matching the regular expression.

         Example:

              perldoc -q shuffle

    [1m-a[0m [4mperlapifunc[0m
         The [1m-a[0m option followed by the name of a perl api function will
         extract the documentation of this function from perlapi.

         Example:

              perldoc -a newHV

    [1m-v[0m [4mperlvar[0m
         The [1m-v[0m option followed by the name of a Perl predefined variable will
         extract the documentation of this variable from perlvar.

         Examples:

              perldoc -v '$"'
              perldoc -v @+
              perldoc -v DATA

    [1m-T[0m   This specifies that the output is not to be sent to a pager, but is
         to be sent directly to STDOUT.

    [1m-d[0m [4mdestination-filename[0m
         This specifies that the output is to be sent neither to a pager nor
         to STDOUT, but is to be saved to the specified filename. Example:
         "perldoc -oLaTeX -dtextwrapdocs.tex Text::Wrap"

    [1m-o[0m [4moutput-formatname[0m
         This specifies that you want Perldoc to try using a Pod-formatting
         class for the output format that you specify. For example: "-oman".
         This is actually just a wrapper around the "-M" switch; using
         "-o[4mformatname[0m" just looks for a loadable class by adding that format
         name (with different capitalizations) to the end of different
         classname prefixes.

         For example, "-oLaTeX" currently tries all of the following classes:
         Pod::Perldoc::ToLaTeX Pod::Perldoc::Tolatex Pod::Perldoc::ToLatex
         Pod::Perldoc::ToLATEX Pod::Simple::LaTeX Pod::Simple::latex
         Pod::Simple::Latex Pod::Simple::LATEX Pod::LaTeX Pod::latex
         Pod::Latex Pod::LATEX.

    [1m-M[0m [4mmodule-name[0m
         This specifies the module that you want to try using for formatting
         the pod. The class must at least provide a "parse_from_file" method.
         For example: "perldoc -MPod::Perldoc::ToChecker".

         You can specify several classes to try by joining them with commas or
         semicolons, as in "-MTk::SuperPod;Tk::Pod".

    [1m-w[0m [4moption:value[0m or [1m-w[0m [4moption[0m
         This specifies an option to call the formatter [1mw[0mith. For example, "-w
         textsize:15" will call "$formatter->textsize(15)" on the formatter
         object before it is used to format the object. For this to be valid,
         the formatter class must provide such a method, and the value you
         pass should be valid. (So if "textsize" expects an integer, and you
         do "-w textsize:big", expect trouble.)

         You can use "-w optionname" (without a value) as shorthand for "-w
         optionname:[4mTRUE[0m". This is presumably useful in cases of on/off
         features like: "-w page_numbering".

         You can use an "=" instead of the ":", as in: "-w textsize=15". This
         might be more (or less) convenient, depending on what shell you use.

    [1m-X[0m   Use an index if it is present. The [1m-X[0m option looks for an entry whose
         basename matches the name given on the command line in the file
         "$Config{archlib}/pod.idx". The pod.idx file should contain fully
         qualified filenames, one per line.

    [1m-L[0m [4mlanguage_code[0m
         This allows one to specify the [4mlanguage code[0m for the desired language
         translation. If the "POD2::<language_code>" package isn't installed
         in your system, the switch is ignored. All available translation
         packages are to be found under the "POD2::" namespace. See POD2::IT
         (or POD2::FR) to see how to create new localized "POD2::*"
         documentation packages and integrate them into Pod::Perldoc.

    [1mPageName|ModuleName|ProgramName|URL[0m
         The item you want to look up. Nested modules (such as
         "File::Basename") are specified either as "File::Basename" or
         "File/Basename". You may also give a descriptive name of a page, such
         as "perlfunc". For URLs, HTTP and HTTPS are the only kind currently
         supported.

         For simple names like 'foo', when the normal search fails to find a
         matching page, a search with the "perl" prefix is tried as well. So
         "perldoc intro" is enough to find/render "perlintro.pod".

    [1m-n[0m [4msome-formatter[0m
         Specify replacement for groff

    [1m-r[0m   Recursive search.

    [1m-i[0m   Ignore case.

    [1m-V[0m   Displays the version of perldoc you're running.

[1mSECURITY[0m
    Because [1mperldoc[0m does not run properly tainted, and is known to have
    security issues, when run as the superuser it will attempt to drop
    privileges by setting the effective and real IDs to nobody's or nouser's
    account, or -2 if unavailable. If it cannot relinquish its privileges, it
    will not run.

    See the "-U" option if you do not want this behavior but [1mbeware[0m that there
    are significant security risks if you choose to use "-U".

    Since 3.26, using "-F" as the superuser also implies "-U" as opening most
    files and traversing directories requires privileges that are above the
    nobody/nogroup level.

[1mENVIRONMENT[0m
    Any switches in the "PERLDOC" environment variable will be used before the
    command line arguments.

    Useful values for "PERLDOC" include "-oterm", "-otext", "-ortf", "-oxml",
    and so on, depending on what modules you have on hand; or the formatter
    class may be specified exactly with "-MPod::Perldoc::ToTerm" or the like.

    "perldoc" also searches directories specified by the "PERL5LIB" (or
    "PERLLIB" if "PERL5LIB" is not defined) and "PATH" environment variables.
    (The latter is so that embedded pods for executables, such as "perldoc"
    itself, are available.)

    In directories where either "Makefile.PL" or "Build.PL" exist, "perldoc"
    will add "." and "lib" first to its search path, and as long as you're not
    the superuser will add "blib" too. This is really helpful if you're
    working inside of a build directory and want to read through the docs even
    if you have a version of a module previously installed.

    "perldoc" will use, in order of preference, the pager defined in
    "PERLDOC_PAGER", "MANPAGER", or "PAGER" before trying to find a pager on
    its own. ("MANPAGER" is not used if "perldoc" was told to display plain
    text or unformatted pod.)

    When using perldoc in it's "-m" mode (display module source code),
    "perldoc" will attempt to use the pager set in "PERLDOC_SRC_PAGER". A
    useful setting for this command is your favorite editor as in
    "/usr/bin/nano". (Don't judge me.)

    One useful value for "PERLDOC_PAGER" is "less -+C -E".

    Having PERLDOCDEBUG set to a positive integer will make perldoc emit even
    more descriptive output than the "-D" switch does; the higher the number,
    the more it emits.

[1mCHANGES[0m
    Up to 3.14_05, the switch [1m-v[0m was used to produce verbose messages of
    [1mperldoc[0m operation, which is now enabled by [1m-D[0m.

[1mSEE ALSO[0m
    perlpod, Pod::Perldoc

[1mAUTHOR[0m
    Current maintainer: Mark Allen "<mallen@cpan.org>"

    Past contributors are: brian d foy "<bdfoy@cpan.org>" Adriano R. Ferreira
    "<ferreira@cpan.org>", Sean M. Burke "<sburke@cpan.org>", Kenneth
    Albanowski "<kjahds@kjahds.com>", Andy Dougherty
    "<doughera@lafcol.lafayette.edu>", and many others.

